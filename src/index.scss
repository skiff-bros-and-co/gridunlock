@use "colors.scss";

@use "sass:color";

@import "~normalize.css";
@import "~@blueprintjs/core/lib/css/blueprint.css";
@import "~@blueprintjs/icons/lib/css/blueprint-icons.css";
@import "~@blueprintjs/popover2/lib/css/blueprint-popover2.css";
@import "~@fontsource/libre-franklin/400.css";
@import "~@fontsource/libre-franklin/600.css";


:root {
  --minimum-cell-size: 20px;
  --minimum-clue-list-size: 120px;

  --puzzle-column-count: 3;
  --puzzle-cell-spacing: 1px;
  --puzzle-cell-size: max(calc(min(70vh, 50vw) / var(--puzzle-column-count)), var(--minimum-cell-size));
  --puzzle-cell-selection-border-width: 2px;
  --puzzle-cell-inner-size: calc(var(--puzzle-cell-size) - 2 * var(--puzzle-cell-selection-border-width));
  --puzzle-cell-content-font-size: calc(var(--puzzle-cell-inner-size) * 0.66);
  --puzzle-cell-clue-font-size: calc(var(--puzzle-cell-inner-size) - var(--puzzle-cell-content-font-size));

  --virtual-keyboard-button-horiz-margin: 3px;
  --virtual-keyboard-button-vert-margin: calc(var(--virtual-keyboard-button-horiz-margin) * 2);
  --virtual-keyboard-button-width: calc(100vw / 10);
  --virtual-keyboard-button-height: calc(var(--virtual-keyboard-button-width) * 1.4);
}

$main-background-color: colors.$dark-gray3;
$cell-dimension: 32px;
$cell-background: colors.$dark-gray1;
$selected-clue-background: colors.$dark-gray5;
$selected-clue-border: colors.$light-gray3;
$selected-clue-border-width: 1px;

body {
  font-family: "Libre FranklinVariable";
  font-variation-settings: "wght" 400;
  background-color: $main-background-color;
  overflow: hidden;
  width: 100vw;
  height: 100vh;

  *:focus {
    outline: none;
  }
}

#content {
  width: 100%;
  height: 100%;
}

.root {
  width: 100%;
  height: 100%;
  padding: 20px;
}

.loading-overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0;
  z-index: 9999;
  transition: 200ms ease-in opacity;

  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;

  background-color: $main-background-color;
  pointer-events: none;

  &.-loading {
    opacity: 1;
    pointer-events: auto;
  }

  .where-is-my-game {
    opacity: 0;
    margin: 0 10px;
    max-width: 500px;
    text-align: center;
    animation: 1s ease-in 10s 1 forwards fade-in;
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.header {
  grid-area: header;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-self: left;
  margin: 0 0 10px 10px;
  flex: 0 0;

  h1 {
    margin: 0;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: pre;
  }

  .buttons {
    margin-left: 10px;
    width: 150px;
  }

  .app-icon {
    height: 28px;
    width: 28px;
    cursor: pointer;
  }
}

.puzzle-view {
  display: grid;
  justify-items: center;
  width: 100%;
  height: 100%;
  overflow: hidden;
  column-gap: 5px;

  &.-puzzle-won {
    .puzzle-cell.unblocked {
      background: color.adjust(#0a6640, $lightness: -5%, $space: hsl);
    }
  }
}

.puzzle-clues-desktop {
  grid-area: clues;
  display: flex;
  flex-direction: column;
  justify-self: left;

  .puzzle-clue-list-title {
    margin: 12px 0px;
  }

  .puzzle-clue-list {
    margin: 0px;
    padding-left: 12px;
  }

  .puzzle-clues-across {
    overflow-y: auto;
    max-height: max(30vh, var(--minimum-clue-list-size));
  }

  .puzzle-clues-down {
    overflow-y: auto;
    max-height: max(30vh, var(--minimum-clue-list-size));
  }

  .selected-puzzle-clue {
    background-color: $selected-clue-background;
    font-variation-settings: "wght" 600;
    box-shadow: inset 0 0 0 $selected-clue-border-width $selected-clue-border;
  }

  .puzzle-clue {
    list-style: none;
    margin: 2px 0px;
    padding: 2px;
  }
}

.puzzle-container {
  grid-area: puzzle-area;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 1px;

  .puzzle-title {
    margin: 2px 0px;
  }

  .puzzle-author {
    margin: 2px 0px;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(var(--puzzle-column-count), var(--puzzle-cell-size));
    grid-template-rows: repeat(auto-fill, var(--puzzle-cell-size));
    column-gap: var(--puzzle-cell-spacing);
    row-gap: var(--puzzle-cell-spacing);

    &,
    * {
      user-select: none;
      -webkit-touch-callout: none;
    }
  }

  .puzzle-copyright {
    margin-top: 5px;
  }
}

.puzzle-cell {
  height: var(--puzzle-cell-size);
  width: var(--puzzle-cell-size);
  border: var(--puzzle-cell-selection-border-width) solid transparent;
  display: grid;
  cursor: text;
  overflow: hidden;

  .content {
    grid-area: 2/-1/2;

    border: none;

    text-align: center;
    font-size: var(--puzzle-cell-content-font-size);
    font-variation-settings: "wght" 600;
    caret-color: transparent;
    background: transparent;
    overflow: hidden;
    line-height: 1;
    padding: 0;
    min-width: 0;

    // This fixes a really annoying bug on iOS, where
    // text was getting clipped
    height: 1.15em;

    // On mobile, we use a virtual keyboard
    // Furthermore, the existing input interactions on iOS lead
    // to a selection callout appearing
    pointer-events: none;
  }

  .clue-number {
    grid-area: 1/-1/2;
    pointer-events: none;
    color: colors.$light-gray1;
    font-size: var(--puzzle-cell-clue-font-size);
    font-variation-settings: "wght" 600;
    line-height: 1;
    white-space: pre-wrap;
    min-width: 0;
  }

  &.-unblocked {
    background-color: $cell-background;
  }

  &.-local-player-selected {
    .clue-number {
      font-variation-settings: "wght" 600;
    }
  }

  &.-in-selected-word {
    background-color: $selected-clue-background;
    box-shadow: 0 0 0 $selected-clue-border-width $selected-clue-border;

    &.-filling-across {
      &.-filling-word-start {
        clip-path: inset(
          #{-$selected-clue-border-width} 0 #{-$selected-clue-border-width} #{-$selected-clue-border-width}
        );
      }

      &.-filling-word-middle {
        clip-path: inset(#{-$selected-clue-border-width} 0 #{-$selected-clue-border-width} 0);
      }

      &.-filling-word-end {
        clip-path: inset(
          #{-$selected-clue-border-width} #{-$selected-clue-border-width} #{-$selected-clue-border-width} 0
        );
      }
    }

    &.-filling-down {
      &.-filling-word-start {
        clip-path: inset(
          #{-$selected-clue-border-width} #{-$selected-clue-border-width} 0 #{-$selected-clue-border-width}
        );
      }

      &.-filling-word-middle {
        clip-path: inset(0 #{-$selected-clue-border-width} 0 #{-$selected-clue-border-width});
      }

      &.-filling-word-end {
        clip-path: inset(
          0 #{-$selected-clue-border-width} #{-$selected-clue-border-width} #{-$selected-clue-border-width}
        );
      }
    }
  }

  &.-marked-incorrect {
    .content {
      color: colors.$red3;
    }
  }
}

.virtual-keyboard {
  grid-area: virtual-keyboard;
  height: calc(3 * var(--virtual-keyboard-button-height));
  width: 100vw;

  border: none;
  border-radius: 0;
  overflow: hidden;
  background: $main-background-color;
  user-select: none;
  touch-action: manipulation;

  display: flex;
  flex-direction: column;

  * {
    user-select: none;
  }

  .row {
    flex: 0 0 var(--virtual-keyboard-button-height);

    display: flex;
    justify-content: center;
  }

  .key {
    flex: 0 0 var(--virtual-keyboard-button-width);
    display: flex;
    align-items: stretch;
    cursor: pointer;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    font-size: 16px;
    padding: var(--virtual-keyboard-button-vert-margin) var(--virtual-keyboard-button-horiz-margin);

    .inner {
      flex-grow: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      color: colors.$white;
      background: colors.$gray1;
      border-radius: 10%;
      pointer-events: none;
    }

    &.-active .inner {
      background: colors.$gray5;
    }
  }
}

.puzzle-clues-narrow {
  grid-area: clues-narrow;
  display: flex;
  align-items: stretch;
  height: 44px;
  width: 100%;

  * {
    user-select: none;
  }

  .button {
    display: flex;
    align-items: center;
    flex-shrink: 0;
    padding: 5px 10px;
    background: $selected-clue-background;
    color: colors.$white;
    cursor: pointer;
    border: none;

    &.clue {
      flex-shrink: 1;
      flex-grow: 1;
      font-size: 12px;
      overflow: hidden;
      justify-content: center;
    }

    &:hover {
      background: colors.$dark-gray4;
    }

    &:active {
      background: colors.$gray1;
    }
  }
}

.puzzle-view {
  grid-template-columns: 0fr 1fr;
  grid-template-rows: 0fr 1fr;
  grid-template-areas:
    "puzzle-area header"
    "puzzle-area clues";
}

.virtual-keyboard {
  display: none;
}

.puzzle-clues-narrow {
  display: none;
}

@media only screen and (max-width: 400px) {
  .app-title {
    display: none;
  }
}

@media only screen and (max-width: 800px) {
  :root {
    --puzzle-cell-size: calc(100vw / var(--puzzle-column-count) - var(--puzzle-cell-spacing));
  }

  .root {
    padding: 8px 0 0 0;
  }

  // TODO: Add info panel
  .puzzle-title,
  .puzzle-copyright,
  .puzzle-author {
    display: none;
  }

  .puzzle-view {
    grid-template-columns: 100%;
    grid-template-rows: 0fr 1fr 0fr;
    grid-template-areas:
      "header"
      "puzzle-area"
      "clues-narrow";
  }

  .puzzle-clues-desktop {
    display: none;
  }

  .puzzle-clues-narrow {
    display: flex;
  }

  .puzzle-container {
    overflow-y: auto;
  }
}

body.-touch-device {
  .puzzle-view {
    grid-template-columns: 100%;
    grid-template-rows: 0fr 1fr 0fr 0fr;
    grid-template-areas:
      "header"
      "puzzle-area"
      "clues-narrow"
      "virtual-keyboard";
  }

  .virtual-keyboard {
    display: flex;
  }

  .puzzle-clues-desktop {
    display: none;
  }

  .puzzle-clues-narrow {
    display: flex;
  }

  .puzzle-clues-narrow {
    // mobile hover is a pain
    .button:hover {
      background: $selected-clue-background;
    }
    .button:active {
      background: colors.$gray1;
    }
  }
}

/* CSS specific to iOS devices */
body.-agent-webkit.-touch-device {
  // https://stackoverflow.com/questions/29001977/safari-in-ios8-is-scrolling-screen-when-fixed-elements-get-focus
  -webkit-overflow-scrolling: touch !important;

  height: stretch;
  .puzzle-view {
    height: stretch;
  }
}
